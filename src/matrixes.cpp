//// This is how many color levels the display shows - the more the slower the update
////#define PxMATRIX_COLOR_DEPTH 8
//
//// Defines the buffer height / the maximum height of the matrix
////#define PxMATRIX_HEIGHT 64
//
//// Defines the buffer width / the maximum width of the matrix
////#define PxMATRIX_WIDTH 64
//
//// Defines how long we display things by default
////#define PxMATRIX_SHOWTIME 30
//
//// Defines the speed of the SPI_2 bus (reducing this may help if you experience noisy images)
////#define PxMATRIX_SPI_FREQEUNCY 20000000
//
//// Creates a second buffer for backround drawing (doubles the required RAM)
////#define PxMATRIX_double_buffer true
//
//#include <libraries/BluetoothManager.h>
//#include "libraries/PxMatrix.h"
//#include "libraries/Max7219.h"
////#include <Wire.h>
//

#include "ConstantsAndSettings.h"
#include "Arduino.h"
#include "PxMatrix.h"

//#define MAX7219_TEST 0x0f // in real code put into a .h file
//#define MAX7219_BRIGHTNESS 0x0a // in real code put into a .h file
//#define MAX7219_SCAN_LIMIT 0x0b // in real code put into a .h file
//#define MAX7219_DECODE_MODE 0x09 // in real code put into a .h file
//#define MAX7219_SHUTDOWN 0x0C // in real code put into a .h file
//
//// byte* matrix_array = (byte*)ps_malloc(64*32*20);
//
//// Pins for LED MATRIX
//#ifdef ESP32
//
//
//
//#define P_SPI2_MOSI 12 //TODOREVERSE
//#define P_SPI2_MISO 25 //25
//#define P_SPI2_CLK 14
//#define P_SD_CS 26
//
//#define P_SEC_REG 27
//
//#define P_R_MOSI 23
//#define P_CLK 18
//#define P_LAT 5
//#define P_OE 19
//
//#define P_UART2_RX 32
//#define P_UART3_TX 33
//
////#define PxMATRIX_SPI_FREQUENCY 15000000
//#define MAX_SPI_FREQUENCY 1000000
//#define P_REG_LATCH 5
//
//
//
//
//
//#endif
//
//
////SPIClass SPI_2(VSPI);
////SPIClass spiClass(HSPI);
//
//#define matrix_width 128
//#define matrix_height 32
//
//// This defines the 'on' time of the display is us. The larger this number,
//// the brighter the display. If too large the ESP will crash
//uint8_t display_draw_time=50; //10-50 is usually fine
//
////PxMATRIX display(128,32,P_LAT, P_OE,P_A,P_B,P_C);
////PxMATRIX display(128,32, P_LAT, P_OE, P_REG_LATCH);
////PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);
//
//
//
//String current = "UwmerpU";
//
//uint8_t static weather_icons[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00
//  ,0x00,0x20,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x07,0xdf,0x07,0xdf,0x07,0xff,0xff,0xe0,0xff,0xe0,0x00,0x00
//  ,0x00,0x00,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0xff,0xe0,0x00,0x20,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0xff,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x07,0xff,0x00,0x20,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xdf,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x07,0xdf,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xdf,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0x07,0xdf,0x07,0xff,0x07,0xff,0x00,0x00,0x00,0x00,0x00,0x00
//  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
//};
//
//void matrixTick();
//
//// void yield()
//// {
////   display.display(display_draw_time);
//// }
//
////void IRAM_ATTR secondDisplay()
////{
////  portENTER_CRITICAL_ISR(&timerMux);
////  // matrixTick();
////  portEXIT_CRITICAL_ISR(&timerMux);
////}
//
//void setAllWhite()
//{
//    PxMatrixClient.fillScreen(PxMatrixClient.white);
//    delay(10000);
//}
//
////void IRAM_ATTR display_updater(void * param){
////  // Increment the counter and set the time of ISR
////  //
////
////  for(;;)
////  {
////  //  if(criticWriting)
////    //{
////      display.display(display_draw_time);
////      //matrixTick();
////      //vTaskDelay(2);
//////    }
////    // else{
////    //   vTaskDelay(10);
////    // }
////
////  }
////  //
////}
//TaskHandle_t Task1;
//
//
//
////void display_update_enable(bool is_enable)
////{
////  if (is_enable)
////  {
//////    timer = timerBegin(0, 80, true);
//////    timerAttachInterrupt(timer, &secondDisplay, true);
//////    timerAlarmWrite(timer, 2000, true);
//////    timerAlarmEnable(timer);
////  }
////  else
////  {
////    timerDetachInterrupt(timer);
////    timerAlarmDisable(timer);
////  }
////}
//
//
////void sendCommand(uint8_t address, uint8_t value, uint8_t cs, uint8_t deviceNumer)
////{
////  // yield();
////  //CHANGE_LOG
//// // SPI_2.setFrequency(MAX_SPI_FREQUENCY);
////  digitalWrite(P_SEC_REG, LOW);
//// // delayMicroseconds(5);
////  digitalWrite(P_SEC_REG, HIGH);
////
////  //digitalWrite(P_TEST_CS, LOW);
//// // SPI_2.transfer(0);
//// // delayMicroseconds(10);
////  //digitalWrite(P_TEST_CS, HIGH);
////  digitalWrite(P_SEC_REG, LOW);
////  delayMicroseconds(5);
//// // delayMicroseconds(5);
////  digitalWrite(P_SEC_REG, HIGH);
////  //SPI_2.setFrequency(PxMATRIX_SPI_FREQUENCY);
////  //display.display(display_draw_time);
////}
//
//
//
//unsigned long lastTick = millis();
//
//#define REFRESH_RATE 100
//boolean odd = false;
//
//int lastFreq = 0;
//
//#define GREEN_PIN_L B11111110
//
//
//// void transferMatrixGREEN(byte arra1[], byte arra2[]){
////   for(int i = 1; i < 9; i++){
//
////     digitalWrite(GREEN_PIN_L, LOW);
////     for(int dev = 0; dev < GREEN_DEVICE_NUMBER; dev++){
////       vspi.transfer(i);
////       vspi.transfer(arra1[i-1+dev*8]);
////     }
////     digitalWrite(GREEN_PIN_L, HIGH);
//
////     digitalWrite(GREEN_PIN_R, LOW);
////     for(int dev = 0; dev < GREEN_DEVICE_NUMBER; dev++){
////       vspi.transfer(i);
////       vspi.transfer((arra2[i-1+dev*8]));
////     }
////     digitalWrite(GREEN_PIN_R, HIGH);
////   }
//// }
//
//
//void matrixTick()
//{
//
//  if(millis() - lastTick > REFRESH_RATE)
//  {
//
//    Serial.println("UEU");
//    //Serial.println("tick");
//    lastTick = millis();
//    //SPI_2.setFrequency(1000000);
//    odd = !odd;
//    delayMicroseconds(10);
//   // SPI_2.setFrequency(PxMATRIX_SPI_FREQUENCY);
//  }
//  return;
//
//
//
//
//  // delay(1000);
//  // SPI_2.transfer(0x0f);
//  // SPI_2.transfer(0x01);
//  // SPI_2.transfer(0);
//  // delayMicroseconds(10);
//  // digitalWrite(P_TEST_CS, HIGH);
//  // Serial.println("SEND 1");
//  // //SPI_2.transfer(0);
//
//  // delay(1000);
//  // //SPI_2.transfer(0);
//  // digitalWrite(P_TEST_CS, LOW);
//  // SPI_2.transfer(0x0f);
//  // SPI_2.transfer(0x00);
//  // SPI_2.transfer(0);
//  // delayMicroseconds(10);
//  // digitalWrite(P_TEST_CS, HIGH);
//  // Serial.println("DONE!");
//}
//
//int i =0;
//int temp = 0;
//void d(int pin){
//    pinMode(pin, OUTPUT);
//    digitalWrite(pin, 1);
//
//}
//void se1tup() {
// Serial.begin(115200);
////    d(PIN_OUTPUT_MAX_MOSI);
////    d(PIN_OUTPUT_MAX_CS);
////    d(PIN_OUTPUT_MAX_CLK);
////    return;
//// setupBLE();
// Serial.println("0");
// //startGlobalMaxDisplayTask();
// MAX7219.begin();
// MAX7219.test();
// MAX7219.display();
// return;
// PxMatrixClient.testMode();
// return;
//  pinMode(P_SEC_REG, OUTPUT);
//  //pinMode(P_TEST, OUTPUT);
//
//  // sendCommand(MAX7219_TEST, 0x01, B11111110, 1);
//  // delay(1000);
//  // sendCommand(MAX7219_TEST, 0x00, B11111110, 1);
//  // delay(1000);
//  // sendCommand(MAX7219_TEST, 0x01, B11111110, 1);
//  // delay(1000);
//
//
// // digitalWrite(P_TEST_CS, HIGH);
//  // Serial.println("WTF");
//  // delay(1000);
////  Serial.println(ESP.getHeapSize());
////  Serial.println(ESP.getPsramSize());
//
//  // Define your display layout here, e.g. 1/8 step, and optional SPI_2 pins init(row_pattern, CLK, MOSI, MISO, SS)
//
//  //display.init(8, 14, 13, 12, 4);
//
//    PxMatrixClient.begin();
//
//
//
//
//  //display.setRotation(2);
//  // Define multiplex implemention here {BINARY, STRAIGHT} (default is BINARY)
//  // display.setMuxPattern(BINARY);
//
//  // Set the time in microseconds that we pause after selecting each mux channel
//  // (May help if some rows are missing / the mux chip is too slow)
//  //display.setMuxDelay(2,2,2,2,2);
//
//  // Set the number of panels that make up the display area width (default is 1)
//   // PxMatrixClient.setPanelsWidth(2);
//
// // display.setColorOrder(RRBBGG);
//
//  // Set the brightness of the panels (default is 255)
//  //display.setBrightness(50);
//
//  // Set driver chip type
//  //display.setDriverChip(FM6124);
//
//
//   // PxMatrixClient.setFastUpdate(true);
//    PxMatrixClient.clear();
//    PxMatrixClient.startDisplayThread();
//    //PxMatrixClient.setBrightness(100);
//  //display_update_enable(true);
//  //setAllWhite();
// // return;
//   //\ delay(10000);
//
//    PxMatrixClient.setTextColor(PxMatrixClient.green);
//    PxMatrixClient.setCursor(2,0);
//    PxMatrixClient.print("Z-Os Embedded v6");
////    PxMatrixClient.setPinState(BIT_5, 1);
////    PxMatrixClient.setPinState(BIT_6, 1);
////    PxMatrixClient.setPinState(BIT_7, 1);
////    PxMatrixClient.setPinState(BIT_8, 1);
//    //PxMatrixClient.setMuxDelay(10);
//    PxMatrixClient.setCursor(0, 16);
//    PxMatrixClient.print(current);
//
//    Serial.println("TEST");
//    //delay(10000);
//  // display.setTextColor(myCYAN);
//  // display.setCursor(2,8);
//  // display.print("UWU OWO UWU");
//  // display.setCursor(2, 16);
//  // display.setTextColor(myGREEN);
//  // display.print("'Notices your bulge'");
//
//
//
//return;
//  for(;true;){
//    if(Serial.available()){
//      current = Serial.readStringUntil('\n');
//      temp = current.toInt();
//      Serial.println(current);
//      if(temp > 255)
//      {
//        PxMatrixClient.setDrawTime(temp-255);
//        continue;
//      }
//      if(temp != 0)
//      {
//          if(temp != 255)
//          {
//              PxMatrixClient.setFastUpdate(false);
//          }
//          else{
//              PxMatrixClient.setFastUpdate(true);
//          }
//        PxMatrixClient.setBrightness(temp);
//      }
//
//        PxMatrixClient.clear();
//        PxMatrixClient.setTextColor(PxMatrixClient.blue);
//        PxMatrixClient.setCursor(2,0);
//        PxMatrixClient.print("Z-Os Embedded v6");
//    }
//      PxMatrixClient.clear();
//      setAllWhite();
//      continue;
//      PxMatrixClient.setTextColor(PxMatrixClient.blue);
//      PxMatrixClient.setCursor(2,0);
//      PxMatrixClient.print("Z-Os Embedded v6");
//      PxMatrixClient.setTextColor(PxMatrixClient.colors[i%8]);
//      PxMatrixClient.setCursor(0, 16);
//      PxMatrixClient.print(current);
//    i++;
//    delay(400);
//
//  }
//  for(int i = 1; i > 0; i++){
//    matrixTick();
//    delay(100);
//    // if(i%10 == 0)
//    // {
//    //   matrixSetup();
//    // }
//  }
//  delay(3000);
//    PxMatrixClient.setBrightness(128);
//
//  delay(10000);
//
//}
//union single_double{
//  uint8_t two[2];
//  uint16_t one;
//} this_single_double;
//
//// This draws the weather icons
////void draw_weather_icon (uint8_t icon)
////{
////  if (icon>10)
////  icon=10;
////  for (int yy=0; yy<10;yy++)
////  {
////    for (int xx=0; xx<10;xx++)
////    {
////      uint16_t byte_pos=(xx+icon*10)*2+yy*220;
////      this_single_double.two[1]=weather_icons[byte_pos];
////      this_single_double.two[0]=weather_icons[byte_pos+1];
////        PxMatrixClient.drawPixel(1+xx,yy,this_single_double.one);
////    }
////  }
////}
////
//unsigned long last_draw=0;
//void scroll_text(uint8_t ypos, unsigned long scroll_delay, String text, uint8_t colorR, uint8_t colorG, uint8_t colorB)
//{
//    uint16_t text_length = text.length();
//    PxMatrixClient.setTextWrap(false);  // we don't wrap text so it scrolls nicely
//    PxMatrixClient.setTextSize(1);
//    PxMatrixClient.setRotation(0);
//    PxMatrixClient.setTextColor(PxMatrixClient.color565(colorR,colorG,colorB));
//
//    // Asuming 5 pixel average character width
//    for (int xpos=matrix_width; xpos>-(matrix_width+text_length*5); xpos--)
//    {
//        PxMatrixClient.setTextColor(PxMatrixClient.color565(colorR,colorG,colorB));
//        PxMatrixClient.clear();
//        PxMatrixClient.setCursor(xpos,ypos);
//        PxMatrixClient.println(text);
//      delay(scroll_delay);
//      yield();
//
//      // This might smooth the transition a bit if we go slow
//      // display.setTextColor(display.color565(colorR/4,colorG/4,colorB/4));
//      // display.setCursor(xpos-1,ypos);
//      // display.println(text);
//
//      delay(scroll_delay/5);
//      yield();
//
//    }
//}
//
//uint8_t icon_index=0;
//void lo1op() {
//    Serial.println("Message");
//    delay(10000);
//    yield();
//    //loopBLE();
//    return;
//  scroll_text(1, 50, "Welcome to PxMatrix!",255,255,255);
//    PxMatrixClient.clear();
//
//  icon_index++;
//  if (icon_index>10)
//    icon_index=0;
//
//  for (int xx=0; xx<16;xx++)
//  {
//      PxMatrixClient.drawLine(xx+16,0,xx+16,5,PxMatrixClient.color565(xx*16,0,0));
//      PxMatrixClient.drawLine(xx+16,6,xx+16,10,PxMatrixClient.color565(0,xx*16,0));
//      PxMatrixClient.drawLine(xx+16,11,xx+16,15,PxMatrixClient.color565(0,0,xx*16));
//  }
//  delay(1000);
//  for (uint8_t dimm=255; dimm>0; dimm--)
//  {
//      PxMatrixClient.setBrightness(dimm);
//    delay(5);
//  }
//  for (uint8_t dimm=0; dimm<255; dimm++)
//  {
//      PxMatrixClient.setBrightness(dimm);
//    delay(5);
//  }
//
//}